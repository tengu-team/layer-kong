from charmhelpers.core.hookenv import status_set, log, config, open_port
from charmhelpers.core.host import service_restart, service_start
from charmhelpers.core.templating import render
from charms.reactive import when, when_not, set_state, remove_state
from charms import layer
from charmhelpers.core import unitdata

import shutil
import subprocess

@when_not('cassandra.available')
def cassandra_removed():
    remove_state('kong.connected')
    status_set('blocked', 'Waiting for a connection with Cassandra.')

@when('config.changed', 'kong.started')
def config_changed():
    conf = config()
    

@when('cassandra.available', 'kong.installed')
@when_not('kong.connected')
def cassandra_attached(cassandra):
    status_set('maintenance', 'Configuring Cassandra.')
    cass_cp = []
    cass_port = ""
    cass_username = ""
    cass_password = ""
    db_update_propagation = 0
    for cass_conf in cassandra.get_configuration():
        print(cass_conf["native_transport_port"])
        if cass_conf["native_transport_port"]:
            cass_cp.append(cass_conf["host"])
            cass_port = cass_conf["native_transport_port"]
            cass_username = cass_conf["username"]
            cass_password = cass_conf["password"]
        else:
            return
    if len(cass_cp) > 1:
        db_update_propagation = len(cass_cp)
    conf = config()
    context = {
        'host': '0.0.0.0',
        'proxy_port': conf.get('proxy_port'),
        'admin_port': conf.get('admin_port'), 
        'db_update_propagation': db_update_propagation, 
        'cass_contact_points': ','.join(cass_cp), 
        'cass_port': cass_port, 
        'cass_username': cass_username, 
        'cass_password': cass_password,
    }
    render('kong.conf', '/etc/kong/kong.conf', context)
    set_state('kong.connected')

@when('apt.installed.openssl', 'apt.installed.libpcre3', 'apt.installed.procps', 'apt.installed.perl')
@when_not('kong.installed', 'kong.started')
def install_kong():
    options = layer.options()
    deb = options['kong']['kong_deb']
    status_set('maintenance', 'Installing Kong from {}.'.format(deb))
    subprocess.call(['wget', '-O', 'kong.deb', deb])
    subprocess.call(['sudo', 'dpkg', '-i', 'kong.deb'])
    set_state('kong.installed')

@when('kong.installed', 'kong.connected')
@when_not('kong.started')
def start_kong():
    conf = config()
    subprocess.call(['kong', 'migrations', 'up'])
    subprocess.call(['kong', 'start'])
    open_port(conf.get('proxy_port'))
    open_port(conf.get('admin_port'))
    set_state('kong.started')
    status_set('active', '(Ready) Kong running.')
